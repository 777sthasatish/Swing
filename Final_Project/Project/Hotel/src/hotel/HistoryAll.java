/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HistoryAll.java
 *
 * 
 */
package hotel;

import java.awt.event.ActionEvent; 
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shreee
 */
public class HistoryAll extends javax.swing.JPanel implements ActionListener {

    DefaultTableModel dm;
    TableProperties props;

    /** Creates new form HistoryAll */
    public HistoryAll() {
        dm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //Only the third column
                return false;
            }
        };
        initComponents();
        props = new TableProperties(tblHistory, dm);
        String[] cols = {"Res. ID", "Guest ID", "Guest Name", "Rooms", "No. of Guests", "Check in", "Check out", "Total paid"};
        props.addColumns(cols);
        props.changeColumnProperties(new int[]{80, 80, 130, 130, 110, 120, 120, 120});
        showAllRooms();
        dm.addRow(new Object[]{1, 2, "abc", "203,204", 5, 2011 - 04 - 04, 2011 - 04 - 05, 7000});
        cmbType.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    if (cmbType.getSelectedIndex() == 1) {
                        cmbRoomID.setEnabled(true);
                    } else {
                        cmbRoomID.setEnabled(false);
                    }
                }
            }
        });
        cmbRoomID.setEnabled(false);
        btnView.addActionListener(this);
        viewDetails("");
        createPopupMenu();
        setVisible(true);
        setSize(600, 600);
    }

    private void viewDetails(String roomid) {
        dm.setRowCount(0);
        Connection conn = DbConnection.getConnection();
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select * from reservation_history,guest where guest.id = reservation_history.guest_id order by reservation_history.reservation_id");
            while (rs.next()) {
                String rooms = rs.getString("rooms");
                if (rooms.contains(roomid)) {
                    dm.addRow(new Object[]{rs.getInt("reservation_id"),rs.getInt("guest_id"),rs.getString("f_name")+" "+ rs.getString("l_name"),rs.getString("rooms"),
                    rs.getInt("num_of_guests"),rs.getDate("check_in"),rs.getDate("check_out"),rs.getInt("total_paid")});
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(HistoryAll.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHistory = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnView = new javax.swing.JButton();
        cmbRoomID = new javax.swing.JComboBox();
        cmbType = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        tblHistory.setModel(dm);
        jScrollPane1.setViewportView(tblHistory);

        btnView.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnView.setText("View");

        cmbRoomID.setFont(new java.awt.Font("Tahoma", 0, 14));

        cmbType.setFont(new java.awt.Font("Tahoma", 0, 14));
        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select All", "Room ID" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16));
        jLabel2.setText("View History By");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnView)
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2)
                .addComponent(cmbRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnView))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnView, cmbRoomID, cmbType, jLabel2});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cmbRoomID;
    private javax.swing.JComboBox cmbType;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHistory;
    // End of variables declaration//GEN-END:variables

    private void showAllRooms() {
        Connection conn = DbConnection.getConnection();
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select * from room");
            while (rs.next()) {
                String roomid = rs.getString("id");
                cmbRoomID.addItem(roomid);

            }
        } catch (SQLException ex) {
            Logger.getLogger(HistoryAll.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("View Full Details"))
        {
            Report r1 = new Report();
            r1.displayCheckoutReport((Integer)dm.getValueAt(tblHistory.getSelectedRow(), 0));
        }else if (e.getActionCommand().equals("View"))
        {
            if (cmbType.getSelectedIndex() == 0)
            {
                viewDetails("");
            }
            else{
                viewDetails((String)cmbRoomID.getSelectedItem());
            }
        }
    }

    private void createPopupMenu() {
        JPopupMenu popup = new JPopupMenu();
        JMenuItem myMenuItem1 = new JMenuItem("View Full Details");
        JMenuItem myMenuItem2 = new JMenuItem("Do Nothing");
        myMenuItem1.addActionListener(this);
        myMenuItem2.addActionListener(this);
        popup.add(myMenuItem1);
        popup.add(myMenuItem2);
        MouseListener popupListener = new PopupListener(popup,tblHistory);
        tblHistory.addMouseListener(popupListener);
    }
}
