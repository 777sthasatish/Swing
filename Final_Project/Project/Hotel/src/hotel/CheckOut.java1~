/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CheckOut.java
 *
 * Created on Oct 11, 2012, 2:16:03 AM
 */
package hotel;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
/**
 *
 * @author mike
 */
public class CheckOut extends javax.swing.JFrame implements ActionListener {

    int RES_ID;
    boolean CHECKED_OUT;

    /** Creates new form CheckOut */
    public CheckOut(int res_id, boolean chkout) {
        super("Checkout Details");
        initComponents();
        RES_ID = res_id;
        CHECKED_OUT = true;
        loadCheckoutDetails();
        toFront();
        btnExit.addActionListener(this);
        btnPrint.addActionListener(this);
        setVisible(true);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        taCheckoutDetails = new javax.swing.JTextArea();
        btnPrint = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        taCheckoutDetails.setColumns(20);
        taCheckoutDetails.setRows(5);
        jScrollPane1.setViewportView(taCheckoutDetails);

        btnPrint.setText("Print");

        btnExit.setText("Exit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(btnExit)
                        .addGap(337, 337, 337)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrint)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnExit) {
            this.dispose();
        } else if (e.getSource() == btnPrint) {
            try {
                boolean succ = taCheckoutDetails.print();
                if (succ) {
                    JOptionPane.showMessageDialog(null, "Print Successfull");
                }
            } catch (PrinterException ex) {
                Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void loadCheckoutDetails() {
        if (CHECKED_OUT) {
            try {
                PreparedStatement stat = DbConnection.getConnection().prepareStatement("select * from reservation_history r, guest g where r.guest_id = g.id and r.reservation_id=?");
                stat.setInt(1, RES_ID);
                ResultSet rs = stat.executeQuery();
                rs.next();
                taCheckoutDetails.setAlignmentX(JTextArea.RIGHT_ALIGNMENT);
                taCheckoutDetails.setFont(new Font("sansserif",Font.PLAIN,14 ));
                taCheckoutDetails.setText("\tHEAVEN HILL HOTEL AND RESTAURANT\n\n");
                taCheckoutDetails.append("Date : 2012/05/05\n");
                taCheckoutDetails.append("Reservation Details\n");
                taCheckoutDetails.append("------------------------------------------------------------------------\n");
                taCheckoutDetails.append("Reservation ID\t:\t"+RES_ID+"\n");
                taCheckoutDetails.append("Check In Date\t:\t"+rs.getDate("check_in") +"\n");
                taCheckoutDetails.append("Number of Days Stayed\t:\t"+"3" +"\n");
                taCheckoutDetails.append("Number of Guests\t:\t"+rs.getInt("num_of_guests") +"\n");
                taCheckoutDetails.append("------------------------------------------------------------------------\n\n");
                taCheckoutDetails.append("Guest Info\n");
                taCheckoutDetails.append("------------------------------------------------------------------------------------\n");
                taCheckoutDetails.append("Guest ID\t\t:\t"+rs.getInt("id"));
                taCheckoutDetails.append("\nGuest Name\t\t:\t"+rs.getString("f_name")+" "+rs.getString("l_name"));
                taCheckoutDetails.append("\nAddress\t\t:\t"+rs.getString("address"));
                taCheckoutDetails.append("\nE-mail\t\t:\t"+rs.getString("e_mail")+"\n");
                taCheckoutDetails.append("------------------------------------------------------------------------------------\n\n");
                taCheckoutDetails.append("Rooms Reserved\n");
                taCheckoutDetails.append("-----------------------\n");
                taCheckoutDetails.append("Room ID\tCategory\t  Num of Rooms\tPrice\n");
                taCheckoutDetails.append("-------------------------------------------------------------------------------------\n");
                taCheckoutDetails.append("SD\tFamily Cottage\t1\t10000\n");
                String cat = "Standard";
                if (cat.length() <13)
                    cat+="\t";
                taCheckoutDetails.append("JPT\t"+cat+"\t2\t10000\n");
                taCheckoutDetails.append("-------------------------------------------------------------------------------------\n");
                taCheckoutDetails.append("\t\tTotal Room Cost\t20000\n\n");
                taCheckoutDetails.append("Foods and Beverages\n");
                taCheckoutDetails.append("-----------------------------\n");
                taCheckoutDetails.append("\tName\t\tQuantity\tPrice\n");
                taCheckoutDetails.append("-------------------------------------------------------------------------------------\n");
                String name = "Buff momo";
                if (name.length() <13)
                    name+="\t";
                taCheckoutDetails.append("1\tAmerican Choupsey\t2\t480\n");
                taCheckoutDetails.append("1\t"+name+"\t2\t480\n");
                taCheckoutDetails.append("-------------------------------------------------------------------------------------\n");
                taCheckoutDetails.append("\t\tTotal Food Cost\t480\n\n");
                taCheckoutDetails.append("Total Amount\t:4900\nDiscount\t:900\nTotal Paid\t:4000");

            } catch (SQLException ex) {
                Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                PreparedStatement stat = DbConnection.getConnection().prepareStatement("select * from reservation_active r, guest g where r.guest_id = g.id and r.reservation_id=?");
                stat.setInt(1, RES_ID);
                ResultSet rs = stat.executeQuery();
                rs.next();

            } catch (SQLException ex) {
                Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea taCheckoutDetails;
    // End of variables declaration//GEN-END:variables
}
