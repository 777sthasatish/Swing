/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ItemCategory.java
 *
 * Created on Oct 16, 2012, 11:12:49 AM
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mike
 */
public class ItemCategory extends javax.swing.JInternalFrame implements ActionListener {

    DefaultTableModel dm;
    TableProperties props;

    /** Creates new form ItemCategory */
    public ItemCategory() {
        super("Item Categories", false, true, false, true);
        dm = new DefaultTableModel();
        initComponents();
        props = new TableProperties(tblItemCategories, dm);
        props.addColumns(new String[]{"Category ID", "Category"});
        props.changeColumnProperties(new int[]{120, 120});
        loadItemCategories();
        btnAdd.addActionListener(this);
        btnDelete.addActionListener(this);
        btnExit.addActionListener(this);
        btnUpdate.addActionListener(this);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblItemCategories = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        tblItemCategories.setModel(dm);
        jScrollPane1.setViewportView(tblItemCategories);

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnAdd.setText("Add ");

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnDelete.setText("Delete");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnUpdate.setText("Update");

        btnExit.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnExit.setText("Exit");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblItemCategories;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if (src == btnAdd) {
            String cat = JOptionPane.showInputDialog("Enter Category Name", "Add Category");
            if (cat == null) {
                return;
            }
            if (cat.trim().equals("")) {
                JOptionPane.showMessageDialog(null, "No category name provided");
                return;
            } else {
                try {
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("select * from item_category where category =?");
                    stat.setString(1, cat);
                    ResultSet rs = stat.executeQuery();
                    int i = 0;
                    while (rs.next()) {
                        i++;
                    }
                    if (i == 0) {
                        stat = DbConnection.getConnection().prepareStatement("insert into item_category (category) values (?)");
                        stat.setString(1, cat);
                        int res = stat.executeUpdate();
                        if (res >= 1) {
                            JOptionPane.showMessageDialog(null, "Category Successfully Added");
                        } else {
                            JOptionPane.showMessageDialog(null, "Couldn't add category");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Category already exists");
                    }

                } catch (Exception ex) {
                    Logger.getLogger(ItemCategory.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (src == btnUpdate) {
            if (tblItemCategories.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Please select item category from table first");
                return;
            }
            String def = (String) dm.getValueAt(tblItemCategories.getSelectedRow(), 1);
            String cat = JOptionPane.showInputDialog(null, "Enter Category Name", def);
            if (cat == null) {
                return;
            }
            if (cat.trim().equals("")) {
                JOptionPane.showMessageDialog(null, "No category name provided");
                return;
            } else if (cat.trim().equals(def)) {
                JOptionPane.showMessageDialog(null, "No update found!!");
                return;
            } else {
                try {
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("select * from item_category where category =?");
                    stat.setString(1, cat);
                    ResultSet rs = stat.executeQuery();
                    int i = 0;
                    while (rs.next()) {
                        i++;
                    }
                    if (i == 0) {
                        stat = DbConnection.getConnection().prepareStatement("update item_category set category=? where cat_id = ?");
                        stat.setString(1, cat);
                        stat.setInt(2, (Integer) dm.getValueAt(tblItemCategories.getSelectedRow(), 0));
                        int res = stat.executeUpdate();
                        if (res >= 1) {
                            JOptionPane.showMessageDialog(null, "Category Successfully updated");
                        } else {
                            JOptionPane.showMessageDialog(null, "Couldn't update category");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Category already exists");
                    }

                } catch (Exception ex) {
                    Logger.getLogger(ItemCategory.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (src == btnDelete) {
            if (tblItemCategories.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Please select item category from table first");
                return;
            }
            int ans = JOptionPane.showConfirmDialog(null, "Are you sure to delete? It will be deleted permanently", "Delete Category", JOptionPane.YES_NO_OPTION);
            if (ans == JOptionPane.YES_OPTION) {
                try {
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("delete from item_category where cat_id =?");
                    stat.setInt(1, (Integer) dm.getValueAt(tblItemCategories.getSelectedRow(), 0));
                    int res = stat.executeUpdate();
                    if (res >= 1) {
                        JOptionPane.showMessageDialog(null, "Category Deleted Successfully");
                    }
                } catch (Exception ee) {
                    JOptionPane.showMessageDialog(null, "Can't delete category when it's being used");
                }
            }
        } else if (src == btnExit) {
            this.dispose();
        }
        loadItemCategories();
    }

    private void loadItemCategories() {
        dm.setRowCount(0);
        try {
            Statement stat = DbConnection.getConnection().createStatement();
            ResultSet rs = stat.executeQuery("select * from item_category");
            while (rs.next()) {
                dm.addRow(new Object[]{rs.getInt("cat_id"),rs.getString("category")});
            }
        } catch (Exception ee) {
        }
    }
}
