/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ManageRoomCategory.java
 *
 * 
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author shreee
 */
public class ManageRoomCategory extends javax.swing.JPanel implements ActionListener{

    DefaultTableModel dm;
    TableProperties props;
    /** Creates new form ManageRoomCategory */
    public ManageRoomCategory() {
        dm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //Only the third column
                return false;
            }
        };
        initComponents();
        props = new TableProperties(tblRoomCategories, dm);
        String[] cols = {"Category ID","Category","Price","Num of Beds"};
        props.addColumns(cols);
        props.changeColumnProperties(new int[]{100,150,100,100});
        
        listCategories();
        btnAdd.addActionListener(this);
        btnUpdate.addActionListener(this);
        btnDelete.addActionListener(this);
        setBorder(BorderFactory.createTitledBorder(null, "Manage Room Category",TitledBorder.CENTER,TitledBorder.ABOVE_TOP));
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoomCategories = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        tblRoomCategories.setModel(dm);
        jScrollPane1.setViewportView(tblRoomCategories);

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnAdd.setText("Add ");

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnDelete.setText("Delete");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnUpdate.setText("Update");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addContainerGap(131, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(441, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addGap(51, 51, 51)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRoomCategories;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
       Object src = e.getSource();
       if (src == btnAdd) {
            AddRoomCategory roomcat = new AddRoomCategory(null, true);
            roomcat.setVisible(true);
            if (!roomcat.isShowing()) {
                listCategories();
            }
        } else if (src == btnUpdate) {
            if (tblRoomCategories.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Select Room Category to Update");
            } else {
                TableModel tm = (TableModel) tblRoomCategories.getModel();
                UpdateRoomCategory updateRoomcat = new UpdateRoomCategory(null, true);
                int row = tblRoomCategories.getSelectedRow();
                updateRoomcat.setValues((Integer)tm.getValueAt(row,0),(String)tm.getValueAt(row, 1), (Integer) tm.getValueAt(row, 2), (Integer) tm.getValueAt(row, 3));    
                updateRoomcat.setVisible(true);
                if (!updateRoomcat.isShowing()) 
                    listCategories();
            }
        }else if (src == btnDelete)
        {
            if (tblRoomCategories.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Select Room Category to Delete");
            } else {
                int ans = JOptionPane.showConfirmDialog(null, "Data will be permanently lost.Are you sure to Delete this Room?","Delete",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (ans == JOptionPane.NO_OPTION)
                {
                    return;
                }
                try {
                    TableModel tm = (TableModel) tblRoomCategories.getModel();
                    if (!canDelete((Integer)tm.getValueAt(tblRoomCategories.getSelectedRow(), 0)))
                    {
                        JOptionPane.showMessageDialog(null, "Sorry this Room Category cannot be Deleted.It's being used.");
                        return;
                    }
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("delete from room_category where cat_id = ?");
                    stat.setInt(1, (Integer)tm.getValueAt(tblRoomCategories.getSelectedRow(), 0));
                    int rr = stat.executeUpdate();
                    if (rr>=1)
                    {
                        JOptionPane.showMessageDialog(null, "Room Category Successfully Deleted!!!");
                        MyLogger.writeLog("delete room category","ID : "+dm.getValueAt(tblRoomCategories.getSelectedRow(),0)+" Category :"+dm.getValueAt(tblRoomCategories.getSelectedRow(),0));
                        listCategories();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ManageRoomCategory.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void listCategories() {
        dm.setRowCount(0);
        Connection conn = DbConnection.getConnection();
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select * from room_category");
            while (rs.next())
            {
                dm.addRow(new Object[]{rs.getInt("cat_id"),rs.getString("category"),rs.getInt("price"),rs.getInt("num_of_beds")});
            }
            stat.close();
        } catch (SQLException ex) {
            Logger.getLogger(ManageRoomCategory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private boolean canDelete(int cat_id)
    {
        Connection conn = DbConnection.getConnection();
        try {
            PreparedStatement stat = conn.prepareStatement("select count(*) from room where cat_id = ?");
            stat.setInt(1, cat_id);
            ResultSet rs = stat.executeQuery();
            rs.next();
            int n = rs.getInt(1);
            if (n >=1)
            {
                return false;
            }
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(ManageRoomCategory.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
}
