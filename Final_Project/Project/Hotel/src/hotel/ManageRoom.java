/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ManageRoom.java
 *
 * 
 */
package hotel;

import java.sql.PreparedStatement;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author shreee
 */
public class ManageRoom extends javax.swing.JPanel implements ActionListener{

    DefaultTableModel dm;
    TableProperties props;
    /** Creates new form ManageRoom */
    public ManageRoom() {
        dm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //Only the third column
                return false;
            }
        };
        initComponents();
        props = new TableProperties(tblRooms, dm);
        String[] cols = {"Room ID", "Category", "Floor"};
        props.addColumns(cols);
        props.changeColumnProperties(new int[]{100, 150, 80});

        listRooms();

        btnAdd.addActionListener(this);
        btnUpdate.addActionListener(this);
        btnDelete.addActionListener(this);
        setBorder(BorderFactory.createTitledBorder(null, "Manage Room",TitledBorder.CENTER,TitledBorder.ABOVE_TOP));
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        tblRooms.setModel(dm);
        jScrollPane1.setViewportView(tblRooms);

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnAdd.setText("Add ");

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnDelete.setText("Delete");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnUpdate.setText("Update");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addContainerGap(214, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 644, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(547, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                    .addGap(49, 49, 49)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRooms;
    // End of variables declaration//GEN-END:variables

     private void listRooms() {
        dm.setRowCount(0);
        Connection conn = DbConnection.getConnection();
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select * from room,room_category where room.cat_id = room_category.cat_id");
            while (rs.next()) {
                dm.addRow(new Object[]{rs.getString("id"), rs.getString("category"), rs.getInt("floor")});
            }
            stat.close();
        } catch (SQLException ex) {
            Logger.getLogger(ManageRoom.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if (src == btnAdd) {
            AddRoom room = new AddRoom(null, true);
            room.setVisible(true);
            if (!room.isShowing()) {
                listRooms();
            }
        } else if (src == btnUpdate) {
            if (tblRooms.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Select Room to Update");
            } else {
                TableModel tm = (TableModel) tblRooms.getModel();
                UpdateRoom updateRoom = new UpdateRoom(null, true);
                int row = tblRooms.getSelectedRow();
                updateRoom.setValues((String)tm.getValueAt(row, 0), (Integer) tm.getValueAt(row, 2), (String) tm.getValueAt(row, 1));    
                updateRoom.setVisible(true);
                if (!updateRoom.isShowing()) 
                    listRooms();
            }
        }else if (src == btnDelete)
        {
            if (tblRooms.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Select Room to Delete");
            } else {
                int ans = JOptionPane.showConfirmDialog(null, "Data will be permanently lost.Are you sure to Delete this Room?","Delete",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (ans == JOptionPane.NO_OPTION)
                {
                    return;
                }
                try {
                    TableModel tm = (TableModel) tblRooms.getModel();
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("delete from room where id = ?");
                    stat.setString(1, (String)tm.getValueAt(tblRooms.getSelectedRow(), 0));
                    int r = stat.executeUpdate();
                    if (r>=1)
                    {
                        JOptionPane.showMessageDialog(null, "Room Successfully Deleted!!!");
                        MyLogger.writeLog("delete room","ID : "+dm.getValueAt(tblRooms.getSelectedRow(),0));
                        listRooms();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ManageRoom.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Room can't be deleted while being used Deleted!!!");
                }
            }
        }
    }
}
