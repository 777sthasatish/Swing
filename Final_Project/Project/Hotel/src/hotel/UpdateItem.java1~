/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UpdateItem.java
 *
 * Created on Sep 24, 2012, 12:41:29 AM
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author mike
 */
public class UpdateItem extends javax.swing.JDialog implements ActionListener {

    /** Creates new form UpdateItem */
    int item_code;
    String oldName, oldCat,oldPrice;

    public UpdateItem(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadCategories();
        btnUpdate.addActionListener(this);
        btnClear.addActionListener(this);
        btnExit.addActionListener(this);
        setTitle("Update Item");
        setLocationRelativeTo(null);
    }

    public void setValues(int code, String name , String cat, int price) {
        System.out.println(code+name+cat+price  );
        item_code = code;
        cmbCategory.setSelectedItem(cat);
        txtName.setText(name);
        txtPrice.setText(price+"");
        oldName = name;
        oldCat = cat;
        oldPrice = price+"";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        cmbCategory = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16));
        jLabel3.setText("Name");

        txtName.setColumns(10);
        txtName.setFont(new java.awt.Font("Tahoma", 0, 14));

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnUpdate.setText("Update");

        btnClear.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnClear.setText("Clear");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16));
        jLabel4.setText("Price");

        txtPrice.setColumns(10);
        txtPrice.setFont(new java.awt.Font("Tahoma", 0, 14));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16));
        jLabel5.setText("Category");

        btnExit.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnExit.setText("Exit");

        cmbCategory.setFont(new java.awt.Font("Tahoma", 0, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnUpdate)
                        .addGap(40, 40, 40)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(btnExit))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(cmbCategory, 0, 146, Short.MAX_VALUE))))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnExit)
                    .addComponent(btnClear))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
            if (e.getSource() == btnUpdate) {
                if (txtName.getText().trim().length() == 0) {
                    JOptionPane.showMessageDialog(null, "Please Enter Name first");
                    return;
                }
                if (txtPrice.getText().trim().length() == 0)
                {
                    JOptionPane.showMessageDialog(null, "Please Enter Price first");
                    return;
                }
                if (! txtPrice.getText().matches("[0-9]+"))
                {
                    JOptionPane.showMessageDialog(null, "Invalid Price format");
                    return;
                }
                if (Integer.parseInt(txtPrice.getText()) <=0)
                {
                     JOptionPane.showMessageDialog(null, "Invalid Price");
                    return;
                }
                
                if (txtName.getText().trim().equalsIgnoreCase(oldName) && cmbCategory.getSelectedItem().equals(oldCat) && oldPrice.equals(txtPrice.getText())) {
                    JOptionPane.showMessageDialog(null, "Nothing to update");
                    return;
                }
                try {
                    int catid = new Item().getCategoryID((String)cmbCategory.getSelectedItem());
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("select count(*) from item where name = ? and cat_id = ? and price=?");
                    stat.setString(1, txtName.getText());
                    stat.setInt(2, catid);
                    stat.setInt(3, Integer.parseInt(txtPrice.getText()));
                    ResultSet rs = stat.executeQuery();
                    rs.next();
                    if (rs.getInt(1) >= 1) {
                        JOptionPane.showMessageDialog(null, "Item already exists");
                    } else {
                        stat = DbConnection.getConnection().prepareStatement("update item set name=?,cat_id=?,price=? where item_code=?");
                        stat.setString(1, txtName.getText().trim());
                        stat.setInt(2, catid);
                        stat.setInt(3, Integer.parseInt(txtPrice.getText()));
                        stat.setInt(4, item_code);
                        int res = stat.executeUpdate();
                        if (res >= 0) {
                            JOptionPane.showMessageDialog(null, "Item updated successfully!!!");
                            this.dispose();
                        }
                    }
                    stat.close();
                } catch (SQLException ex) {
                    Logger.getLogger(AddItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (e.getSource() == btnClear) {
                txtName.setText(oldName);
                cmbCategory.setSelectedItem(oldCat);
                txtPrice.setText(oldPrice);
            } else if (e.getSource() == btnExit){
                this.dispose();
            }
        }
    
     private void loadCategories() {
        try {
            Statement stat = DbConnection.getConnection().createStatement();
            ResultSet rs = stat.executeQuery("select category from item_category");
            while (rs.next()) {
                cmbCategory.addItem(rs.getString("category"));
            }
            stat.close();
        } catch (SQLException ex) {
            Logger.getLogger(AddItem.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
