/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewRooms.java
 *
 * Created on Sep 12, 2012, 11:14:55 PM
 */
package hotel;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mike
 */
public class ViewRooms extends javax.swing.JInternalFrame implements ItemListener {

    DefaultTableModel dm;
    DefaultTableModel dm2;
    TableProperties props;
    /** Creates new form ViewRooms */
    public ViewRooms() {
        super("Rooms",false,true,false,true);
        dm = new DefaultTableModel();
        String[] columnNames = { "Room category", "Total Rooms", "Available", "Reserved", "Price per Night"};
        dm = new DefaultTableModel();
        String[] cols = {"Room ID","No. of Beds","floor"};
        dm2 = new DefaultTableModel();
        initComponents();
        props = new TableProperties(tbDetails, dm);
        props.addColumns(columnNames);
        int []sizes = {150,100,100,100,150};
        props.changeColumnProperties(sizes);
        showAllRooms();
        props = new TableProperties(tbRooms, dm2);
        props.addColumns(cols);
        props.changeColumnProperties(new int[]{100,100,100});
        cmbCategory.addItemListener(this);
        cmbAvailability.addItemListener(this);
        reloadList();
        setSize(640,520);
        setVisible(true);        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDetails = new javax.swing.JTable(dm);
        jLabel2 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        cmbAvailability = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbRooms = new javax.swing.JTable(dm2);

        jLabel1.setFont(new java.awt.Font("Californian FB", 0, 24));
        jLabel1.setText("List of Rooms");

        jScrollPane1.setViewportView(tbDetails);

        jLabel2.setFont(new java.awt.Font("Californian FB", 0, 18));
        jLabel2.setText("Select Category");

        cmbAvailability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Available", "Reserved" }));

        jScrollPane2.setViewportView(tbRooms);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbAvailability, 0, 100, Short.MAX_VALUE)
                .addGap(89, 89, 89))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addGap(172, 172, 172))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(cmbAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbAvailability;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbDetails;
    private javax.swing.JTable tbRooms;
    // End of variables declaration//GEN-END:variables

    private void showAllRooms() {
        Connection conn = DbConnection.getConnection();
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select * from room_category");
            int price;
            while (rs.next())
            {
                String cat = rs.getString("category");
                price = rs.getInt("price");
                int cat_id = rs.getInt("cat_id");
                cmbCategory.addItem(cat);
                PreparedStatement ps = conn.prepareStatement("select status from room where cat_id = ?");
                ps.setInt(1, cat_id);
                ResultSet rss = ps.executeQuery();
                int a=0,n=0;
                while (rss.next())
                {
                    int b = rss.getInt("status");
                    if (b==1)
                        a++;
                    else
                        n++;
                }
                dm.addRow(new Object[]{cat,a+n,a,n,price});
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewRooms.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void reloadList()
    {
          dm2.setRowCount(0);
                try {
                    PreparedStatement ps;
                    if (cmbAvailability.getSelectedIndex() == 0){
                        ps = DbConnection.getConnection().prepareStatement("select * from room,room_category where room_category.category= ? and room.cat_id = room_category.cat_id");
                        ps.setString(1, (String)cmbCategory.getSelectedItem());
                    }
                    else
                    {
                        ps = DbConnection.getConnection().prepareStatement("select * from room,room_category where room.status = ? and room_category.category = ? and room.cat_id = room_category.cat_id");
                        int availability = 0;
                        if (cmbAvailability.getSelectedIndex() == 1)
                            availability = 1;
                        ps.setInt(1, availability);
                        ps.setString(2, (String)cmbCategory.getSelectedItem());
                    }
                    ResultSet rs = ps.executeQuery();
                    while (rs.next())
                    {
                        dm2.addRow(new Object[]{rs.getString("id"),rs.getInt("num_of_beds"),rs.getInt("floor")});
                    }
                    
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "error");
                    ex.printStackTrace();
                }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED)
        {
            if (e.getSource() == cmbCategory)
            {
              reloadList();
            }else if (e.getSource() == cmbAvailability)
            {
                reloadList();
            }
        }
    }
}
