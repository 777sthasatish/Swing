/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReservationForm.java
 *
 * Created on Sep 12, 2012, 10:41:58 PM
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author mike
 */
public class ReservationForm extends javax.swing.JInternalFrame implements ActionListener, ItemListener, KeyListener {

    ButtonGroup bg;
    int current_catid;
    boolean GUEST_FOUND = false;
    int GUEST_ID = -1;
    Date checkin = null;
    String ofname, olname, oaddress, ogender, oemail, ocontact;
    Room r;

    /** Creates new form ReservationForm */
    public ReservationForm() {
        super("Reservation", false, true, false, true);
        initComponents();
        r = new Room();
        datepicker.setMinSelectableDate(new Date());
        initialize();
        txtNoOfRooms.setText(String.valueOf(0));
        txtFirstName.requestFocus();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtGuestID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        rdoNewGuest = new javax.swing.JRadioButton();
        rdoExistingGuest = new javax.swing.JRadioButton();
        cmbGender = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtNoOfRooms = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbCategory = new javax.swing.JComboBox();
        cmbRoomID = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstRooms = new javax.swing.JList(model);
        btnRemove = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txtNoOfGuests = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        datepicker = new com.toedter.calendar.JDateChooser();
        txtFAdvancePayment = new javax.swing.JTextField();
        txtFTotalRoomCost = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setTitle("Reservation");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Guest Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel2.setText("Guest ID");

        txtGuestID.setColumns(10);

        jLabel3.setText("First Name");

        txtFirstName.setColumns(10);

        jLabel4.setText("Last Name");

        txtLastName.setColumns(10);

        jLabel5.setText("Address");

        txtAddress.setColumns(10);

        jLabel6.setText("Gender");

        jLabel7.setText("E-mail");

        txtEmail.setColumns(10);

        jLabel8.setText("Contact No.");

        txtContact.setColumns(10);

        rdoNewGuest.setText("New Guest");

        rdoExistingGuest.setText("Have Guest ID");

        cmbGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(rdoNewGuest))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGuestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbGender, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAddress, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(rdoExistingGuest))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(rdoNewGuest)
                    .addComponent(rdoExistingGuest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2))
                    .addComponent(txtGuestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3))
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5))
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel6))
                    .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel7))
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel8))
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Room Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel9.setText("No. of Rooms");

        txtNoOfRooms.setColumns(10);
        txtNoOfRooms.setEditable(false);

        jLabel10.setText("Category");

        jLabel11.setText("Room ID");

        jLabel12.setText("Selected Room(s)");

        lstRooms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstRooms);

        btnRemove.setText("Remove");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(txtNoOfRooms, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                    .addComponent(cmbRoomID, 0, 109, Short.MAX_VALUE)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNoOfRooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnRemove)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reservation Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel13.setText("No. of guests");

        txtNoOfGuests.setColumns(10);

        jLabel14.setText("Check In Date");

        jLabel15.setText("Advance Payment");

        jLabel16.setText("Total Room Cost");

        datepicker.setDateFormatString("MM-dd-yyyy");

        txtFAdvancePayment.setColumns(10);

        txtFTotalRoomCost.setColumns(10);
        txtFTotalRoomCost.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtNoOfGuests)
                    .addComponent(txtFTotalRoomCost)
                    .addComponent(txtFAdvancePayment)
                    .addComponent(datepicker, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtNoOfGuests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14)
                    .addComponent(datepicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtFAdvancePayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtFTotalRoomCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(159, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36));
        jLabel1.setText("Reservation Form");

        btnReset.setText("Reset");

        btnSave.setText("Save");

        btnExit.setText("Exit");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnReset)
                .addGap(18, 18, 18)
                .addComponent(btnExit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnReset)
                    .addComponent(btnExit))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbGender;
    private javax.swing.JComboBox cmbRoomID;
    private com.toedter.calendar.JDateChooser datepicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    DefaultListModel model = new DefaultListModel();
    private javax.swing.JList lstRooms;
    private javax.swing.JRadioButton rdoExistingGuest;
    private javax.swing.JRadioButton rdoNewGuest;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFAdvancePayment;
    private javax.swing.JTextField txtFTotalRoomCost;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtGuestID;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtNoOfGuests;
    private javax.swing.JTextField txtNoOfRooms;
    // End of variables declaration//GEN-END:variables
    final Connection conn = DbConnection.getConnection();
    HashMap<String, Integer> pricelist;

    private void initialize() {

        bg = new ButtonGroup();
        bg.add(rdoNewGuest);
        bg.add(rdoExistingGuest);

        rdoNewGuest.addItemListener(this);
        rdoExistingGuest.addItemListener(this);
        rdoNewGuest.setSelected(true);
        btnExit.addActionListener(this);
        btnSave.addActionListener(this);
        btnReset.addActionListener(this);
        btnRemove.addActionListener(this);
        txtFTotalRoomCost.setText(String.valueOf(0));
        pricelist = new HashMap<String, Integer>();
        lstRooms.removeAll();
        lstRooms.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting() && lstRooms.getSelectedIndex() != -1) {
                    cmbCategory.setSelectedItem(r.getCategory((String) lstRooms.getSelectedValue()));
                }
            }
        });

        //to add categories in the combobox
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("select category from room_category");
            while (rs.next()) {
                cmbCategory.addItem(rs.getString("category"));
            }
            listRooms();

        } catch (SQLException ex) {
            Logger.getLogger(ReservationForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        cmbCategory.addItemListener(this);
        txtContact.addKeyListener(this);
        txtNoOfGuests.addKeyListener(this);

        txtGuestID.addKeyListener(this);
        txtFAdvancePayment.addKeyListener(this);
        txtFirstName.requestFocus();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnExit) {
            this.dispose();
        } else if (e.getSource() == btnRemove) {
            if (lstRooms.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(null, "Please select room from the list");
            } else {
                int room_cost = r.getPrice((String) cmbCategory.getSelectedItem());
                model.remove(lstRooms.getSelectedIndex());
                txtNoOfRooms.setText(model.getSize() + "");
                int cur_cost = Integer.parseInt(txtFTotalRoomCost.getText());
                txtFTotalRoomCost.setText(String.valueOf(cur_cost - room_cost));
            }
        } else if (e.getSource() == btnReset) {
            resetAll();
        } else if (e.getSource() == btnSave) {
            if (!validateAll()) {
                return;
            }
            boolean success = true;
            if (rdoNewGuest.isSelected()) {
                success = addGuest();
            } else {
                success = updateGuest();
            }
            if (success) {
                addReservation();
            }

        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getSource() == cmbCategory) {
                listRooms();
            } else if (e.getSource() == cmbRoomID) {
                if (model.contains(cmbRoomID.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Room already selected");
                } else {
                    model.addElement((String) cmbRoomID.getSelectedItem());//adds to room list
                    txtNoOfRooms.setText(model.getSize() + "");//sets no. of rooms 
                    int curr_cost = Integer.parseInt(txtFTotalRoomCost.getText());
                    int room_cost = r.getPrice((String) cmbCategory.getSelectedItem());
                    txtFTotalRoomCost.setText(curr_cost + room_cost + "");//shows total cost
                }
            } else if (e.getSource() == rdoNewGuest) {
                txtGuestID.setEditable(false);
                txtFirstName.requestFocus();
                txtGuestID.setText("");
            } else if (e.getSource() == rdoExistingGuest) {
                txtGuestID.setEditable(true);
                txtGuestID.requestFocus();
            }
        }
    }

    private void listRooms()
    {
        cmbRoomID.removeAllItems();
        try {
                    PreparedStatement stat = conn.prepareStatement("select id from room where cat_id = ? and status = 1");
                    stat.setInt(1, r.getCategoryID((String) cmbCategory.getSelectedItem()));
                    ResultSet rs = stat.executeQuery();
                    cmbRoomID.removeItemListener(this);
                    while (rs.next()) {
                        cmbRoomID.addItem(rs.getString("id"));
                    }
                    cmbRoomID.setSelectedIndex(-1);
                    cmbRoomID.addItemListener(this);
                } catch (SQLException ex) {
                    Logger.getLogger(ReservationForm.class.getName()).log(Level.SEVERE, null, ex);
                }
    }
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() == txtNoOfGuests) {
            if (e.getKeyChar() < '0' || e.getKeyChar() >= '9') {
                txtNoOfGuests.setText("");
            }
        } else if (e.getSource() == txtContact) {
            if (e.getKeyChar() < '0' || e.getKeyChar() >= '9') {
                txtContact.setText("");
            }
        } else if (e.getSource() == txtGuestID) {
            if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                findGuest();
            }
        } else if (e.getSource() == txtFAdvancePayment) {
            if (e.getKeyChar() < '0' || e.getKeyChar() >= '9') {
                txtFAdvancePayment.setText("");
            }
        }
    }

    private void findGuest() {
        int guest_id = Integer.parseInt(txtGuestID.getText());
        try {
            PreparedStatement stat = conn.prepareStatement("select * from guest where id = ?");
            stat.setInt(1, guest_id);
            ResultSet rs = stat.executeQuery();
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(null, "Sorry Guest ID not found");
                txtFirstName.setText("");
                txtLastName.setText("");
                txtAddress.setText("");
                txtContact.setText("");
                txtEmail.setText("");
                cmbGender.setSelectedIndex(-1);
                GUEST_FOUND = false;
                GUEST_ID = -1;
            } else {
                PreparedStatement stat1 = conn.prepareStatement("select count(*) from reservation_active where guest_id=?");
                stat1.setInt(1, guest_id);
                ResultSet rs1 = stat1.executeQuery();
                rs1.next();
                if (rs1.getInt(1) >= 1) {
                    int c = JOptionPane.showConfirmDialog(null, "This guest has already reserved room. Would you like to modify it's reservation details?", "Modify Reservation", JOptionPane.YES_NO_OPTION);
                    if (c == JOptionPane.NO_OPTION) {
                        GUEST_FOUND = false;
                        return;

                    }
                    GUEST_FOUND = true;
                    GUEST_ID = guest_id;
                    loadReservationDetails();
                } else {
                    rs.next();
                    txtFirstName.setText(rs.getString("f_name"));
                    txtLastName.setText(rs.getString("l_name"));
                    txtAddress.setText(rs.getString("address"));
                    txtContact.setText(rs.getString("contact_num"));
                    txtEmail.setText(rs.getString("e_mail"));
                    cmbGender.setSelectedItem(rs.getString("gender"));
                    ofname = txtFirstName.getText();
                    olname = txtLastName.getText();
                    oaddress = txtAddress.getText();
                    ogender = (String) cmbGender.getSelectedItem();
                    oemail = txtEmail.getText();
                    ocontact = txtContact.getText();
                    GUEST_FOUND = true;
                    GUEST_ID = guest_id;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReservationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void resetAll() {
        rdoNewGuest.setSelected(true);
        txtFirstName.setText("");
        txtLastName.setText("");
        txtAddress.setText("");
        txtEmail.setText("");
        txtContact.setText("");
        txtNoOfRooms.setText("0");
        txtNoOfGuests.setText("");
        txtFAdvancePayment.setText("");
        txtFTotalRoomCost.setText("0");
        txtGuestID.setText("");
        model.clear();
        datepicker.setDate(null);
        cmbGender.setSelectedIndex(0);
        cmbCategory.setSelectedIndex(0);
        cmbRoomID.setSelectedIndex(-1);
    }

    private void addReservation() {
        int res_id = -1;
        try {
            PreparedStatement stat = conn.prepareStatement("insert into reservation_active(guest_id,num_of_rooms,num_of_guests,check_in,advance_payment,total_room_cost) values (?,?,?,?,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
            stat.setInt(1, GUEST_ID);
            stat.setInt(2, Integer.parseInt(txtNoOfRooms.getText()));
            stat.setInt(3, Integer.parseInt(txtNoOfGuests.getText()));
            stat.setDate(4, new java.sql.Date(checkin.getTime()));
            stat.setInt(5, Integer.parseInt(txtFAdvancePayment.getText()));
            stat.setInt(6, Integer.parseInt(txtFTotalRoomCost.getText()));
            stat.executeUpdate();
            ResultSet rs = stat.getGeneratedKeys();
            rs.next();
            res_id = rs.getInt(1);
            for (int i = 0; i < model.size(); i++) {
                stat = conn.prepareStatement("insert into rooms_reserved values (?,?)");
                stat.setInt(1, res_id);
                stat.setString(2, (String) model.get(i));
                stat.executeUpdate();
            }
            JOptionPane.showMessageDialog(null, "Reesrvation Successfull");

            for (int i = 0; i < model.size(); i++) {
                stat = conn.prepareStatement("update room set status=0 where id=?");
                stat.setString(1, (String) model.get(i));
                stat.executeUpdate();
            }
            resetAll();
        } catch (Exception e) {
        }
    }

    private boolean addGuest() {
        try {
            PreparedStatement stat = conn.prepareStatement("insert into guest(f_name,l_name,address,gender,e_mail,contact_num) values (?,?,?,?,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
            stat.setString(1, txtFirstName.getText());
            stat.setString(2, txtLastName.getText());
            stat.setString(3, txtAddress.getText());
            stat.setString(4, (String) cmbGender.getSelectedItem());
            stat.setString(5, txtEmail.getText());
            stat.setString(6, txtContact.getText());
            stat.executeUpdate();
            ResultSet rs = stat.getGeneratedKeys();
            rs.next();
            GUEST_ID = rs.getInt(1);
            return true;
        } catch (Exception e) {
        }
        return false;
    }

    private boolean validateAll() {
        if (rdoNewGuest.isSelected()) {
            if (txtFirstName.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter first name");
                txtFirstName.requestFocus();
                return false;
            }
            if (txtLastName.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter last name");
                txtLastName.requestFocus();
                return false;
            }
            if (txtAddress.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter address");
                txtAddress.requestFocus();
                return false;
            }
            if (txtEmail.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter Email");
                txtEmail.requestFocus();
                return false;
            }
            if (txtContact.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter contact number");
                txtContact.requestFocus();
                return false;
            }
            String regex = "\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*";
            if (!txtEmail.getText().matches(regex)) {
                JOptionPane.showMessageDialog(null, "Invalid Email Address");
                txtEmail.requestFocus();
                return false;
            }
            if (txtContact.getText().trim().length() < 7 || txtContact.getText().trim().length() > 14) {
                JOptionPane.showMessageDialog(null, "Invalid Contact number");
                txtContact.requestFocus();
                return false;
            }
        } else {
            if (txtGuestID.getText().trim().length() == 0) {
                JOptionPane.showMessageDialog(null, "please enter guest ID");
                txtGuestID.requestFocus();
                return false;
            }
            if (!GUEST_FOUND) {
                JOptionPane.showMessageDialog(null, "please refer adding new guest");
                txtGuestID.requestFocus();
                return false;
            }
        }
        if (txtNoOfRooms.getText().equals("0")) {
            JOptionPane.showMessageDialog(null, "Select at least one room to perform reservation");
            cmbRoomID.requestFocus();
            return false;
        }
        if (txtNoOfGuests.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "please enter number of guests");
            txtNoOfGuests.requestFocus();
            return false;
        }
        if (datepicker.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Please select date first");
            return false;
        } else {
            checkin = datepicker.getDate();
        }
        int guests = Integer.parseInt(txtNoOfGuests.getText());
        if (guests < 1 || guests > 100) {
            JOptionPane.showMessageDialog(null, "Invalid number of guests");
            txtNoOfGuests.requestFocus();
            return false;
        }
        if (txtFAdvancePayment.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "please enter advance payment");
            txtFAdvancePayment.requestFocus();
            return false;
        }
        return true;
    }

    private boolean updateGuest() {
        if (ofname.equals(txtFirstName.getText())
                && txtLastName.getText().equals(olname)
                && txtAddress.getText().equals(oaddress)
                && ((String) cmbGender.getSelectedItem()).equals(ogender)
                && txtEmail.getText().equals(oemail)
                && txtContact.getText().equals(ocontact)) {
            return true;
        }
        try {
            PreparedStatement stat = conn.prepareStatement("update guest set f_name=?,l_name=?,address=?,gender=?,e_mail=?,contact_num=? where id=?");
            stat.setString(1, txtFirstName.getText());
            stat.setString(2, txtLastName.getText());
            stat.setString(3, txtAddress.getText());
            stat.setString(4, (String) cmbGender.getSelectedItem());
            stat.setString(5, txtEmail.getText());
            stat.setString(6, txtContact.getText());
            stat.setInt(7, GUEST_ID);
            int res = stat.executeUpdate();
            if (res >= 1) {
                return true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Problem occurred while accessing database");
        }
        return false;
    }

    private void loadReservationDetails() {
        rdoNewGuest.setSelected(true);
        txtFirstName.setText("");
        txtLastName.setText("");
        txtAddress.setText("");
        txtEmail.setText("");
        txtContact.setText("");
        txtNoOfRooms.setText("0");
        txtNoOfGuests.setText("");
        txtFAdvancePayment.setText("");
        txtFTotalRoomCost.setText("0");
        txtGuestID.setText("");
        model.clear();
        datepicker.setDate(null);
        cmbGender.setSelectedIndex(0);
        cmbCategory.setSelectedIndex(0);
        cmbRoomID.setSelectedIndex(-1);
    }
}
