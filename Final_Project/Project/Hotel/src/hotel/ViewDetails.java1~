/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewDetails.java
 *
 * Created on Sep 17, 2012, 10:24:27 PM
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mike
 */
public class ViewDetails extends javax.swing.JInternalFrame implements ActionListener {

    DefaultTableModel dm;
    private TableProperties props;
    int GUEST_ID;
    int RES_ID_NEW;


    /** Creates new form ViewDetails */
    public ViewDetails() {
        super("Reservation Details", true, true, true, true);

        dm = new DefaultTableModel();
        initComponents();

        props = new TableProperties(tblActiveReservations, dm);
        props.addColumns(new String[]{"Res. ID", "Guest Name", "Address", "No of Rooms", "No of Guests", "Check In Date", "Contact No."});
        int[] sizes = {80, 130, 160, 100, 100, 150, 200};
        props.changeColumnProperties(sizes);
        loadDetails();
        createPopupMenu();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblActiveReservations = new javax.swing.JTable(dm);

        jScrollPane1.setViewportView(tblActiveReservations);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblActiveReservations;
    // End of variables declaration//GEN-END:variables

    private void loadDetails() {
        dm.setRowCount(0);
        try {
            Statement stat = DbConnection.getConnection().createStatement();
            ResultSet rs = stat.executeQuery("select * from reservation_active r, guest g where r.guest_id = g.id order by r.reservation_id");
            while (rs.next()) {
                Object[] r = {rs.getInt("reservation_id"), rs.getString("f_name") + " " + rs.getString("l_name"), rs.getString("address"), rs.getInt("num_of_rooms"), rs.getInt("num_of_guests"), rs.getDate("check_in"), rs.getString("contact_num")};
                dm.addRow(r);
                GUEST_ID = rs.getInt("g.id");
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewDetails.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void createPopupMenu() {
        JPopupMenu popup = new JPopupMenu();
        JMenuItem myMenuItem1 = new JMenuItem("Checkout");
        JMenuItem myMenuItem2 = new JMenuItem("View Details");
        myMenuItem1.addActionListener(this);
        myMenuItem2.addActionListener(this);
        popup.add(myMenuItem1);
        popup.add(myMenuItem2);
        MouseListener popupListener = new PopupListener(popup, tblActiveReservations);
        tblActiveReservations.addMouseListener(popupListener);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Checkout")) {
            int res = JOptionPane.showConfirmDialog(null, "Are you sure to checkout?", "Checkout", JOptionPane.YES_NO_OPTION);
            if (res != JOptionPane.YES_OPTION) {
                return;
            }
            if (!checkout()) {
                JOptionPane.showMessageDialog(null, "Checkout Unsuccessful");
                return;
            }
            loadDetails();
            CheckOut fd = new CheckOut(RES_ID_NEW,true);
            fd.toFront();
        } else if (e.getActionCommand().equals("View Details")) {
            CheckOut fd = new CheckOut((Integer)dm.getValueAt(tblActiveReservations.getSelectedRow(), 0),false);
            fd.toFront();
        }

    }

    private boolean checkout() {
        Date checkin_date = (Date) dm.getValueAt(tblActiveReservations.getSelectedRow(), 5);
        Date d = new Date();
        double num_days = Math.abs((d.getTime() - checkin_date.getTime()) / (60 * 60 * 24 * 1000));
        int days = (int) num_days;
        Calendar cal = Calendar.getInstance();
        int ampm = cal.get(Calendar.AM_PM);
        if (ampm == Calendar.PM) {
            days++;
        }
        if (days <1)
            days = 1;
//        JOptionPane.showMessageDialog(null, d.getTime() + " and " + checkin_date.getTime());
        int room_cost = 0, adv_payment = 0;
        Connection conn = DbConnection.getConnection();
        try {
            PreparedStatement stat = conn.prepareStatement("select * from reservation_active where reservation_id=?");
            stat.setInt(1, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 0));
            ResultSet rs = stat.executeQuery();
            rs.next();
            room_cost = rs.getInt("total_room_cost");
            adv_payment = rs.getInt("advance_payment");
        } catch (Exception e) {
        }

        int total_room_cost = room_cost * days;
//        JOptionPane.showMessageDialog(null, total_room_cost + " and " + room_cost);
        int total_food_cost = 0;
        try {
            PreparedStatement stat = conn.prepareStatement("select * from order_active,item where reservation_id=? and order_active.item_code=item.item_code");
            stat.setInt(1, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 0));
            ResultSet rs = stat.executeQuery();
            while (rs.next()) {
                total_food_cost += (rs.getInt("quantity") * rs.getInt("price"));
                System.out.println(rs.getInt("quantity") + " and " + rs.getInt("price"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        String rooms = "";
        try {
            PreparedStatement stat = conn.prepareStatement("select room_id from rooms_reserved where reservation_id = ?");
            stat.setInt(1, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 0));
            ResultSet rs = stat.executeQuery();
            while (rs.next()) {
                rooms += rs.getString("room_id");
                if (!rs.isLast()) {
                    rooms += ",";
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        int total_cost = total_food_cost + total_room_cost;
        int remaining_cost = total_cost - adv_payment;
        int discount = 0;
        while (true) {
            String dis = JOptionPane.showInputDialog("Remaining cost is " + remaining_cost + ". Please Enter the Discount amount for the guest.");
            try {
                discount = Integer.parseInt(dis);
                if (discount < 0 || discount >= remaining_cost) {
                    JOptionPane.showMessageDialog(null, "Invalid Discount Amount");
                } else {
                    break;
                }
            } catch (Exception e) {
            }
        }
        int paid = total_cost - discount;

        try {
            PreparedStatement stat = conn.prepareStatement("insert into reservation_history values (" + null + ",?,?,?,?,?,?,?,?,?,?,?)", PreparedStatement.RETURN_GENERATED_KEYS);
            stat.setInt(1, GUEST_ID);
            stat.setInt(2, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 3));
            stat.setString(3, rooms);
            stat.setInt(4, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 4));
            stat.setDate(5, (java.sql.Date) dm.getValueAt(tblActiveReservations.getSelectedRow(), 5));

            stat.setDate(6, new java.sql.Date(new Date().getTime()));
            stat.setInt(7, adv_payment);
            stat.setInt(8, total_room_cost);
            stat.setInt(9, total_food_cost);
            stat.setInt(10, discount);
            stat.setInt(11, paid);

            stat.executeUpdate();
            ResultSet rs = stat.getGeneratedKeys();
            rs.next();
            RES_ID_NEW = rs.getInt(1);
            
            
            stat = conn.prepareStatement("select * from order_active where reservation_id = ?");
            stat.setInt(1, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 0));
            rs = stat.executeQuery();
            while (rs.next()) {
                PreparedStatement stat2 = conn.prepareStatement("insert into order_history(item_code,quantity,reservation_id,guest_id) values (?,?,?,?)");
                stat2.setInt(1, rs.getInt("item_code"));
                stat2.setInt(2, rs.getInt("quantity"));
                stat2.setInt(3, RES_ID_NEW);
                stat2.setInt(4, GUEST_ID);
                stat2.executeUpdate();
            }

                stat = conn.prepareStatement("select * from rooms_reserved where reservation_id = ?");
                stat.setInt(1, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 0));
                rs = stat.executeQuery();
                while (rs.next()) {
                    PreparedStatement stat2 = conn.prepareStatement("update room set status = ? where id = ?");
                    stat2.setInt(1, 1);
                    stat2.setString(2, rs.getString("room_id"));
                    stat2.executeUpdate();
                }
                stat = conn.prepareStatement("delete from reservation_active where reservation_id = ?");
                stat.setInt(1, (Integer) dm.getValueAt(tblActiveReservations.getSelectedRow(), 0));
                int r = stat.executeUpdate();
                if (r >= 1) {
                    return true;
                }
        } catch (Exception e) {
            e.printStackTrace();
        }


        return false;
    }
}
