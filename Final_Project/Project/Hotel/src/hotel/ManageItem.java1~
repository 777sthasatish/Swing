/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ManageItem.java
 *
 * Created on Sep 23, 2012, 10:52:48 PM
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author mike
 */
public class ManageItem extends javax.swing.JInternalFrame implements ActionListener{

    /** Creates new form ManageItem */
    Item item;
    DefaultTableModel dm;
    TableProperties props;
    public ManageItem() {
        super("Restaurant Items",false,true,false,true);
        dm = new DefaultTableModel();
        initComponents();
        item = new Item();
        props = new TableProperties(tblRooms, dm);
        String[] cols = {"Item Code","Name","Category","Price"};
        props.addColumns(cols);
        props.changeColumnProperties(new int[]{100,150,150,100});
        
        listItems();

        btnAdd.addActionListener(this);
        btnUpdate.addActionListener(this);
        btnDelete.addActionListener(this);
        btnExit.addActionListener(this);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        tblRooms.setModel(dm);
        jScrollPane1.setViewportView(tblRooms);

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnAdd.setText("Add ");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnUpdate.setText("Update");

        btnExit.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnExit.setText("Exit");

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 14));
        btnDelete.setText("Delete");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnAdd)
                    .addComponent(btnExit)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRooms;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnAdd)
        {
            AddItem add = new AddItem(null, true);
            add.setVisible(true);
            if (!add.isShowing())
                listItems();
        }
        else if (e.getSource() == btnUpdate)
        {   
            if (tblRooms.getSelectedRow() == -1)
            {
                JOptionPane.showMessageDialog(null, "Select Item to Update");
            }
            else
            {
                TableModel tm = (TableModel) tblRooms.getModel();
                UpdateItem update = new UpdateItem(null,true);
                int row = tblRooms.getSelectedRow();
                update.setValues((Integer)tm.getValueAt(row, 0), (String)tm.getValueAt(row, 1),(String)tm.getValueAt(row, 2),(Integer)tm.getValueAt(row, 3));
                update.setVisible(true);
                if (!update.isShowing())
                    listItems();
            }
        }else if (e.getSource() == btnDelete){
             if (tblRooms.getSelectedRow() == -1)
            {
                JOptionPane.showMessageDialog(null, "Select Item to Delete");
            }
            else
            {
                int ans = JOptionPane.showConfirmDialog(null, "Data will be permanently lost.Are you sure to Delete this Item?","Delete",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (ans == JOptionPane.NO_OPTION)
                {
                    return;
                }
                try {
                    TableModel tm = (TableModel) tblRooms.getModel();
                    PreparedStatement stat = DbConnection.getConnection().prepareStatement("delete from item where item_code = ?");
                    stat.setInt(1, (Integer)tm.getValueAt(tblRooms.getSelectedRow(), 0));
                    int r = stat.executeUpdate();
                    if (r>=1)
                    {
                        JOptionPane.showMessageDialog(null, "Item Successfully Deleted!!!");
                        listItems();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ManageRoom.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else if (e.getSource() == btnExit)
        {
            this.dispose();
        }
    }

    private void listItems() {
       dm.setRowCount(0);
        Connection conn = DbConnection.getConnection();
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery("select * from item");
            while (rs.next())
            {
                String cat = item.getCategory(rs.getInt("cat_id"));
                dm.addRow(new Object[]{rs.getInt("item_code"),rs.getString("name"),cat,rs.getInt("price")});
            }
            stat.close();
        } catch (SQLException ex) {
            Logger.getLogger(ManageRoom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
