/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GuestList.java
 *
 * 
 */
package hotel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.print.PrinterException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shreee
 */
public class GuestList extends javax.swing.JInternalFrame implements ActionListener {

    DefaultTableModel dm;
    TableProperties props;

    /** Creates new form GuestList */
    public GuestList() {
        super("List of All Guests", false, true, false, true);
        dm = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //Only the third column
                return false;
            }
        };
        initComponents();
        props = new TableProperties(tblGuestList, dm);
        props.addColumns(new String[]{"Guest ID", "Guest Name", "Gender", "Address", "Contact num.", "E-mail"});
        props.changeColumnProperties(new int[]{100, 150, 80, 150, 100, 140});
        viewGuests();
        btnExit.addActionListener(this);
        btnPrint.addActionListener(this);
        cmbListBy.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                viewGuests();
            }
        });
        setVisible(true);
    }

    private void viewGuests() {
        dm.setRowCount(0);
        Connection conn = DbConnection.getConnection();
        String query = null;
        if (cmbListBy.getSelectedIndex() == 0) {
            query = "select * from guest order by id";
        } else {
            query = "select * from guest g,reservation_active r where g.id = r.guest_id order by g.id";
        }
        try {
            Statement stat = conn.createStatement();
            ResultSet rs = stat.executeQuery(query);
            while (rs.next()) {
                dm.addRow(new Object[]{rs.getInt("id"), rs.getString("f_name") + " " + rs.getString("l_name"), rs.getString("gender"),
                            rs.getString("address"), rs.getString("contact_num"), rs.getString("e_mail")});
            }
        } catch (SQLException ex) {
            Logger.getLogger(HistoryAll.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblGuestList = new javax.swing.JTable();
        btnPrint = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbListBy = new javax.swing.JComboBox();

        tblGuestList.setModel(dm);
        jScrollPane1.setViewportView(tblGuestList);

        btnPrint.setText("Print");

        btnExit.setText("Exit");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16));
        jLabel2.setText("List Guest by");

        cmbListBy.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbListBy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Currently Staying" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbListBy, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(450, 450, 450)
                        .addComponent(btnPrint)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbListBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrint)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JComboBox cmbListBy;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblGuestList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnExit) {
            this.dispose();
        } else if (e.getSource() == btnPrint) {
            if (dm.getRowCount() < 1) {
                JOptionPane.showMessageDialog(null, "Nothing to print");
                return;
            }
            try {
                boolean b = tblGuestList.print();
                if (b) {
                    JOptionPane.showMessageDialog(null, "Print Succesfull");
                    MyLogger.writeLog("Print", "Guest List Printed");
                } else {
                    JOptionPane.showMessageDialog(null, "Sorry!!!! Couldn't print table");
                }
            } catch (PrinterException ex) {
                Logger.getLogger(GuestList.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
