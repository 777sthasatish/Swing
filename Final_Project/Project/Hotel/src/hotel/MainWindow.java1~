/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on Sep 11, 2012, 9:14:24 PM
 */
package hotel;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;

/**
 *
 * @author mike
 */
public class MainWindow extends javax.swing.JFrame implements ActionListener {

    private JDesktopPane jdesktop = null;

    /** Creates new form MainWindow */
    public MainWindow(String user) {
        initComponents();

        //JOptionPane.showMessageDialog(null, user+" logged in");
        setTitle("HEAVEN HILL - " + user);
        jdesktop = new JDesktopPane();
        setContentPane(jdesktop);
        addListeners();
        Toolkit tk = Toolkit.getDefaultToolkit();
        setSize((int) tk.getScreenSize().getWidth() - 4, (int) tk.getScreenSize().getHeight() - 44);
        setLocationRelativeTo(null);
        setVisible(true);
        menu_admin.setEnabled(false);
        if (user.equalsIgnoreCase("admin")) {
            menu_admin.setEnabled(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        m_logout = new javax.swing.JMenuItem();
        m_exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        m_reservationForm = new javax.swing.JMenuItem();
        m_viewRooms = new javax.swing.JMenuItem();
        m_viewDetails = new javax.swing.JMenuItem();
        menu = new javax.swing.JMenu();
        m_guestList = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        m_order = new javax.swing.JMenuItem();
        m_vieworders = new javax.swing.JMenuItem();
        menu_admin = new javax.swing.JMenu();
        m_viewReport = new javax.swing.JMenuItem();
        m_viewHistory = new javax.swing.JMenu();
        m_reservationHistory = new javax.swing.JMenuItem();
        m_OrderHistory = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        m_password = new javax.swing.JMenuItem();
        m_room = new javax.swing.JMenuItem();
        m_items = new javax.swing.JMenuItem();
        m_roomcategory = new javax.swing.JMenuItem();
        m_itemCategory = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HEAVEN HILL HOTEL AND RESTAURANT");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);

        jMenu1.setText("Account");

        m_logout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        m_logout.setMnemonic('L');
        m_logout.setText("Log out");
        m_logout.setInheritsPopupMenu(true);
        jMenu1.add(m_logout);

        m_exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        m_exit.setText("Exit");
        jMenu1.add(m_exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Reservation");

        m_reservationForm.setText("Reservation Form");
        jMenu2.add(m_reservationForm);

        m_viewRooms.setText("View Rooms");
        jMenu2.add(m_viewRooms);

        m_viewDetails.setText("View Details (checkout)");
        jMenu2.add(m_viewDetails);

        jMenuBar1.add(jMenu2);

        menu.setText("Guest");

        m_guestList.setText("List All Guests");
        menu.add(m_guestList);

        jMenuBar1.add(menu);

        jMenu3.setText("Services");

        m_order.setText("Add Order");
        jMenu3.add(m_order);

        m_vieworders.setText("View Orders");
        jMenu3.add(m_vieworders);

        jMenuBar1.add(jMenu3);

        menu_admin.setText("Admin");

        m_viewReport.setText("View Report");
        menu_admin.add(m_viewReport);

        m_viewHistory.setText("View History");

        m_reservationHistory.setText("Reservations");
        m_viewHistory.add(m_reservationHistory);

        m_OrderHistory.setText("Orders");
        m_viewHistory.add(m_OrderHistory);

        menu_admin.add(m_viewHistory);

        jMenu6.setText("Manage");

        m_password.setText("Password");
        jMenu6.add(m_password);

        m_room.setText("Room");
        jMenu6.add(m_room);

        m_items.setText("Items");
        jMenu6.add(m_items);

        m_roomcategory.setText("Room Category");
        jMenu6.add(m_roomcategory);

        m_itemCategory.setText("Item Category");
        jMenu6.add(m_itemCategory);

        menu_admin.add(jMenu6);

        jMenuBar1.add(menu_admin);

        jMenu4.setText("Help");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 698, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem m_OrderHistory;
    private javax.swing.JMenuItem m_exit;
    private javax.swing.JMenuItem m_guestList;
    private javax.swing.JMenuItem m_itemCategory;
    private javax.swing.JMenuItem m_items;
    private javax.swing.JMenuItem m_logout;
    private javax.swing.JMenuItem m_order;
    private javax.swing.JMenuItem m_password;
    private javax.swing.JMenuItem m_reservationForm;
    private javax.swing.JMenuItem m_reservationHistory;
    private javax.swing.JMenuItem m_room;
    private javax.swing.JMenuItem m_roomcategory;
    private javax.swing.JMenuItem m_viewDetails;
    private javax.swing.JMenu m_viewHistory;
    private javax.swing.JMenuItem m_viewReport;
    private javax.swing.JMenuItem m_viewRooms;
    private javax.swing.JMenuItem m_vieworders;
    private javax.swing.JMenu menu;
    private javax.swing.JMenu menu_admin;
    // End of variables declaration//GEN-END:variables

    private void addListeners() {
        m_exit.addActionListener(this);
        m_items.addActionListener(this);
        m_logout.addActionListener(this);
        m_password.addActionListener(this);
        m_reservationForm.addActionListener(this);
        m_room.addActionListener(this);
        m_viewDetails.addActionListener(this);
        m_reservationHistory.addActionListener(this);
        m_OrderHistory.addActionListener(this);
        m_viewReport.addActionListener(this);
        m_viewRooms.addActionListener(this);
        m_order.addActionListener(this);
        m_roomcategory.addActionListener(this);
        m_guestList.addActionListener(this);
        m_vieworders.addActionListener(this);
        m_itemCategory.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();
        if (src == m_logout) {
            int ans = JOptionPane.showConfirmDialog(null, "Are you sure to log out?", "Log out", JOptionPane.YES_NO_OPTION);
            if (ans == JOptionPane.OK_OPTION) {
                try {
                    Screen2Image s2i = new Screen2Image();
                } catch (Exception ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.dispose();
                new Login().setVisible(true);
            }
        } else if (src == m_exit) {
            int ans = JOptionPane.showConfirmDialog(null, "Are you sure to Exit?", "Exit", JOptionPane.YES_NO_OPTION);
            if (ans == JOptionPane.OK_OPTION) {
                this.dispose();
                System.exit(0);
            }
        } else if (src == m_reservationForm) {
            ReservationForm res_form = new ReservationForm();
            jdesktop.add(res_form);
            
        } else if (src == m_viewRooms) {
            ViewRooms view_rooms = new ViewRooms();
            jdesktop.add(view_rooms);
//             try {
//                view_rooms.setMaximum(true);
//            } catch (PropertyVetoException ex) {
//                Logger.getLogger(ViewDetails.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } else if (src == m_viewDetails) {
            ViewDetails vd = new ViewDetails();
            jdesktop.add(vd);
            try {
                vd.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(ViewDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (src == m_order ){
            Order ord = new Order();
            jdesktop.add(ord);
        }else if (src == m_room)
        {
            ManageRoom mgroom = new ManageRoom();
            jdesktop.add(mgroom);
        }else if (src == m_items)
        {
            ManageItem mitm = new ManageItem();
            jdesktop.add(mitm);
        }
        else if (src == m_roomcategory)
        {
            RoomCategory roomcat = new RoomCategory();
            jdesktop.add(roomcat);
        }
        else if (src == m_reservationHistory)
        {
            ReservationHistory his = new ReservationHistory();
            jdesktop.add(his);
            try {
                his.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(ViewDetails.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else if (src == m_password)
        {
            PasswordControl pass = new PasswordControl();
            jdesktop.add(pass);
        }
        else if (src == m_OrderHistory)
        {
            OrderHistory orderhis = new OrderHistory();
            jdesktop.add(orderhis);
        }
        else if (src == m_guestList)
        {
            GuestList guests = new GuestList();
            jdesktop.add(guests);
        }
        else if (src == m_vieworders)
        {
            ViewOrders vieworders = new ViewOrders();
            jdesktop.add(vieworders);
        }
        else if (src == m_itemCategory)
        {
            ItemCategory itemcat = new ItemCategory();
            jdesktop.add(itemcat);
        }
       
    }
}
